TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

# cleanup for test
def cleanup():
  if "testfile.txt.a" in listfiles():
    removefile("testfile.txt.a")
  if "testfile.txt.b" in listfiles():
    removefile("testfile.txt.b")
	
# assumption 4 - lets try to cause overflow
# I will create ABFile, write 1M symbols of valid information via writeat()
# close the ABFile, open it again, and should open as expected 
# if exceptions would be thrown - thats successful attack

try:
	
	cleanup()
	myfile=ABopenfile("testfile.txt",True)
	
	content = ""
	for i in range (0, 1000000):
		content = content + "X"
	
	content = "S" + content + "E"
	
	myfile.writeat(content,0)
	myfile.close()
	
	myfile=ABopenfile("testfile.txt",False)
	expected = content
	actual = myfile.readat(None,0)
	assert(expected == actual)
	
except AssertionError:
	log("[(4) ERROR]: AssertionError - 1M symbols of valid content written, file closed, reopened for reading, readat() called, should get SX...XE on readat but got:" + actual + "\n")

except IOError:
	log("[(4) ERROR]: Very big (1M symbols) valid ABFile caused an exception: " + str(e) + "\n")
	pass
	
finally:
	myfile.close()
	pass